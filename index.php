<!DOCTYPE html>
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
      <title>Engineered DNA Sequence Syntax Inspector"</title>
      <link href="http://andersonlab.qb3.berkeley.edu/syntaxchecker/favicon.ico" rel="shortcut icon">
      <meta content="Engineered DNA Sequence Syntax Inspector" name="description">
        <link href="css/application.css" media="all" rel="stylesheet" type="text/css">
        <link href="css/bootstrap_and_overrides.css" media="all" rel="stylesheet" type="text/css">
        <link href="css/home.css" media="all" rel="stylesheet" type="text/css">
     
      
    
  </head>
  <body class="home index">
    <header class="navbar navbar-fixed-top">
      <nav class="navbar-inner">
        <div class="container">
          <a href="." class="title">Engineered DNA Sequence Syntax Inspector</a>
          <a href="http://andersonlab.qb3.berkeley.edu" class="navlink">Home</a>
          <a href="http://tbd" class="navlink">Paper</a>
          
        </div>
      </nav>
    </header>
    <div id="main" role="main">
      <div class="container">
      <div class="content">
<p>        
              <form name="input" id="input" action="syntaxchecker.php" method="post" onSubmit="return validateInput();">
                Enter your DNA sequence:<br>
                <textarea rows="20" cols="700" id="inputSeq"  name="inputSeq" ></textarea>
		<br>
                <input type="submit" value="Find Errors">
                </form>
</p>

<script type="text/javascript">

function updateInput(correctedInput){
	document.forms["input"]["inputSeq"].value = correctedInput;
}
function trimTrailingLeading(text){
	//gets rid of trailing and leading newlines
	return text.replace(/^[\r\n]+|[\r\n]+$/, '');
}
function validateInput(){
	var input = document.forms["input"]["inputSeq"].value;
	//first get rid of trailing and leading newlines
	input = trimTrailingLeading(input);
	//these functions validate input and return a fasta string if successful
	//if not successful, a false is returned
	//probably something like program synthesis will be better at coming up with all of the potential matches (see flash fill feature in excel 2013)
	if(validateFasta(input)){
		return true;
	}
	var delimiterArray = ["\t", "\n", ",", ";", ":", " "];
	for(var i = 0; i < delimiterArray.length; i++){
		var delimiter = delimiterArray[i];
		var correctedInput = validateDelimited(input, delimiter);
		if(correctedInput){
			updateInput(correctedInput);
			return true;
		}
	}
	var correctedInput = validateDNAOnly(input);
	if(correctedInput){
		updateInput(correctedInput);
		return true;
	}
	alert("Input is not valid");
	return false;
	
}
function validateDNAOnly(text){
	text = text.trim();
	if( /^[ACTGN\s]+$/i.test(text) ){
		var correctedInput = ">Untitled\n"+text;
		return correctedInput;
	}
	else{
		return false;
	}
}
function validateDelimited(dna, delimiter) {
	//split on tab
	var parts = dna.split(delimiter);
	if( /^[ACTGN\s]+$/i.test(parts[1]) ){
		var name = parts[0];
		var dna = parts[1];
		var correctedInput= ">" + name + "\n" + dna;
		return correctedInput;
	} // close if
	else if(/^[ACTGN\s]+$/i.test(parts[0]) && parts[1]){
	        var name = parts[1];
                var dna = parts[0];
                var correctedInput= ">" + name + "\n" + dna;
                return correctedInput;	
	}
	else{
		return false;
	}
}
function validateFasta(fasta) {
   // modified from http://blopig.com/blog/?p=409
   // this allows DNA fasta only, will want to modify the regex if that's not your use case
    if (!fasta) { // check there is something first of all
        return false;
    }
 
    // immediately remove trailing spaces
    fasta = fasta.trim();
 
    // split on newlines... 
    var lines = fasta.split('\n');
 
    // check for header
    if (fasta[0] == '>') {
        // remove one line, starting at the first position
        lines.splice(0, 1);
    }
    // no header! is not valid fasta
    else{
        return false;
    }
 
    // join the array back into a single string without newlines and 
    // trailing or leading spaces
    fasta = lines.join('').trim();
 
    if (!fasta) { // is it empty whatever we collected ? re-check not efficient 
        return false;
    }
 
    // note that the empty string is caught above
    return /^[ACTGN\s]+$/i.test(fasta);
}

function loadExample(replacement)
{
        var div = document.getElementById('inputSeq');
        div.value = replacement;
}

var pCTXvp60 = "pCTXvp60_extraORF\tCGTCTCATTTTCGCCAAAAGTTGGCCCAGGGCTTCCCGGTATCAACAGGGACACCAGGATTTATTTATTCTGCGAAGTGATCTTCCGTCACAGGTATTTATTCGGCGCAAAGTGCGTCGGGTGATGCTGCCAACTTACTGATTTAGTGTATGATGGTGTTTTTGAGGTGCTCCAGTGGCTTCTGTTTCTATCAGCTGTCCCTCCTGTTCAGCTACTGACGGGGTGGTGCGTAACGGCAAAAGCACCGCCGGACATCAGCGCTAGCGGAGTGTATACTGGCTTACTATGTTGGCACTGATGAGGGTGTCAGTGAAGTGCTTCATGTGGCAGGAGAAAAAAGGCTGCACCGGTGCGTCAGCAGAATATGTGATACAGGATATATTCCGCTTCCTCGCTCACTGACTCGCTACGCTCGGTCGTTCGACTGCGGCGAGCGGAAATGGCTTACGAACGGGGCGGAGATTTCCTGGAAGATGCCAGGAAGATACTTAACAGGGAAGTGAGAGGGCCGCGGCAAAGCCGTTTTTCCATAGGCTCCGCCCCCCTGACAAGCATCACGAAATCTGACGCTCAAATCAGTGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTTCCCCCTGGCGGCTCCCTCGTGCGCTCTCCTGTTCCTGCCTTTCGGTTTACCGGTGTCATTCCGCTGTTATGGCCGCGTTTGTCTCATTCCACGCCTGACACTCAGTTCCGGGTAGGCAGTTCGCTCCAAGCTGGACTGTATGCACGAACCCCCCGTTCAGTCCGACCGCTGCGCCTTATCCGGTAACTATCGTCTTGAGTCCAACCCGGAAAGACATGCAAAAGCACCACTGGCAGCAGCCACTGGTAATTGATTTAGAGGAGTTAGTCTTGAAGTCATGCGCCGGTTAAGGCTAAACTGAAAGGACAAGTTTTGGTGACTGCGCTCCTCCAAGCCAGTTACCTCGGTTCAAAGAGTTGGTAGCTCAGAGAACCTTCGAAAAACCGCCCTGCAAGGCGGTTTTTTCGTTTTCAGAGCAAGAGATTACGCGCAGACCAAAACGATCTCAAGAAGATCATCTTATTAGGATCTATTAATACGACTCACTATAGGGATCCCGGGCGCGCCGTCGACTTTAAAGTTCATCCTTTTCAGAAACATATGAAAATCCATTAGCAGTTCCTCCAAGATTAAAAACAAGAGTAGACTTAGATGGTCTTGGTCCAACTGGTCTAACATCAATAAGTTCAGTAAGATCAATAAGAGTAGTAGAAGCTCCAGTTCCAGCATAAAAATATCCATCAACAGAAAGTCCAATTTCCATGAATCCAGAAGCAAAAGTAAGTTGCCAAACAAAAAATTGTCCTGGCATAAGAGCAGAAGAATAATTATTAAGAGAAAGTCCAATAGTAACTGGAAGTGGTTGAGATCCAGTTCCATATTGAGTTCCATTAGCAGATCCAGCAGTAGCATTAACATCTCCAGTTCTTCTAACAACAGAAGCAAACATAATTGGAGTATTCTTTCCAACTGGAGCTGCAGCTGGAGTTCCTGGAGTAGTAACAATTCTATCTGGTTGTGGAGTATAAGTAATAGCATTAGCAGATGGAGTAGAAATAACTCCAGAAGCCATAACAAAAAGTCCAGCTGGATTTTGAGCAGTTCCAGTAACAACAGCATAGATAGACTTAGCAACAGTTTGAGATCCAGAAGTATTAGTAGTTGGTTGAAGATTTCCTGGAGCTCCAGTAGCAAATCCAAGTTCATAAGCTTGAACAGTAGTAACATTTGGAGCTCCAGAATTAGAGTTCCAAATAGCTCCAAATCCAACCCATCCAGCAGCTGGAATACCTGGTCCATTGAATGGAACAAAAGACATATCTGGAAATCCATCTGGAGCAACTTGAGAAATTGGATTATCAATAGCAGATCCAGCATTAGCATACCAAAATTGAAGAACATTAGTAGCATTAGATCCTGGATAAGAAGCAGATCCTCTTCTATGATCGATATCAGCAAATCTTGGAGAAGACCATCCATAAGTAGATCCATTAAGATTCCAATGTCTATTACAAGTAGAAAATCCTCCTGGAACTGGTTGAAGTCCAACAATTTGTCCATTCCATCTATTATCATTTCCAACTCCAGTAAGAACTGGAGTAGTAAGAAGTCCAGCTGGATAGATAGAATCAACAGTCTTAGAAGATGGAGTTCTAATCATAACAAATTCAAAATCTTCAGATGGTCTAGTTTCAACAGTAACTTGAATAGCAGAAGTAGATCCTCCAAATGGATTAATAAGATTATTATAAACAGAAAGAACAAGAGTTGGAACAAGTCCTGGATCTCCAGTTGGATGATACATATTTGGTCTAAGGTCTGGCATAGTAATAGTAACTGGTTCAAGAGACCTAGCATCAATAACAACATGTGGAAATTGTCTAACTTCAAGACCTGGTCCAATTTCAATTCCTGGTGGAATAACAGCAGCAACAAGTCTTCCTCCAAAAACTCCAGATCCAGCAACAATGAATCTGAATTGCATTCCTCCAGCCCATCCAGCATACATTTGAGAAAGAACAGCAGTGAATGGATTATTTTGTGGAGAATGTTGAACAGTATAAAGAATAGATCCTGGAGCATCAGCAACAGACCAAGTAAAAACATCATTATAATAAAAATTAGTTCTCCAAGTTTCTTGTTGATCAACTTGTTGTGGTGGTCCTCCAATTCCAGCAGTAGCAATAGAAGCAGAAGAATTTTCAGCAGTAACAACAGAAGTAGTAGCAACAACTCCTGGGTCCATTCCATCAGTAGTAGTTCCTGGAACAGAAGCAGTAGTAGCAGTTCCAGCAGCTCCAGCTTGTGGAGCAGTTCTAGCCTTTCCTTCCATGGGTCCTGGTCCATTAGCCATAGAAATAGCAGCAATAGCATGTGGAGTCTTATTATTCCAAACACACAACTTTTCAACCTTAGCTTCAGTAAGATAAGCAATTCTAAGAGTATCCTTCATTCTTTCAATAGCCTTCTTTTGAGAATCAATATGTTGAGATCCTGGAACTTCAACTTGAAAAGTAGCTCCATTCTTAAAAGTAATAATAGCCATTTCTCTCTTTCCAGCAAGAGATTCAGTATAAGAAAAAATCTTATCATTAAGAGTATGAATTTGAGTATTATGATATTCAGCACAAAGATCAGTAATATTTTGTGGAGTGGAGGAAGCCATTGTCCCGGGCGGCCGCTTCTATAGTGTCACCTAAATCGGGTCGAATTTGCTTTCGAATTTCTGCCATTCATCCGCTTATTATCACTTATTCAGGCGTACAACCAGGCGTTTAAGGGCACCAATAACTGCCTTAAAAAAATTACGCCCCGCCCTGCCACTCATCGCAGTACTGTTGTAATTCATTAAGCATTCTGCCGACATGGAAGCCATCACAAACGGCATGATGAACCTGAATCGCCAGCGGCATCAGCACCTTGTCGCCTTGCGTATAATATTTGCCCATAGTGAAAACGGGGGCGAAGAAGTTGTCCATATTGGCCACGTTTAAATCAAAACTGGTGAAACTCACCCAGGGATTGGCTGAGACGAAAAACATATTCTCAATAAACCCTTTAGGGAAATAGGCCAGGTTTTCACCGTAACACGCCACATCTTGCGAATATATGTGTAGAAACTGCCGGAAATCGTCGTGGTATTCACTCCAGAGCGATGAAAACGTTTCAGTTTGCTCATGGAAAACGGTGTAACAAGGGTGAACACTATCCCATATCACCAGCTCACCGTCTTTCATTGCCATACGGAATTCCGGATGAGCATTCATCAGGCGGGCAAGAATGTGAATAAAGGCCGGATAAAACTTGTGCTTATTTTTCTTTACGGTCTTTAAAAAGGCCGTAATATCCAGCTGAACGGTCTGGTTATAGGTACATTGAGCAACTGACTGAAATGCCTCAAAATGTTCTTTACGATGCCATTGGGATATATCAACGGTGGTATATCCAGTGATTTTTTTCTCCATTTTAGCTTCCTTAGCTCCTGAAAATCTCGATAACTCAAAAAATACGCCCGGTAGTGATCTTATTTCATTATGGTGAAAGTTGGAACCTCTTACGTGCCGATCAA";
var nitrogenseq = ">nifS_point_mutations_X13303\nATGAAACAGGTTTATCTCGATAACAACGCCACCACCCGTCTGGACCCGATGGTCCTGGAAGCGATGATGCCCTTTTTGACCGATTTTTACGGCAACCCCTCGTCGATACACGATTTTGGCATTCCGGCCCAGGCGGCTCTGGAACGCGCGCATCAGCAGGCTGCGGCGCTGCTGGGCGCGGAGTATCCCAGCGAGATCATCTTTACCTCCTGCGCCACCGAAGCCACCGCCACCGCCATCGCCTCGGCGATCGCCCTGCTGCCTGAGCGTCGCGAAATCATCACCAGCGTGGTCGAACATCCGGCGACGCTGGCGGCCTGCGAGCACATGGAGCGCGAGGGCTACCGGATTCATCGCATCGCGGTAGATGGCGAGGGGGCGCTGGACATGGCGCAGTTCCGCGCGGCGCTCAGCCCGCGCGTCGCGTTGGTCAGCGTGATGTGGGCGAATAACGAAACCGGGGTGCTTTTCCCGATCGGCGAAATGGCGGAGCTGGCCCATGAACAAGGGGCGCTGTTTCACTGCGATGCGGTGCAGGTGGTCGGGAAAATACCGATCGCCGTGGGCCAGACCCGCATCGATATGCTCTCCTGCTCGGCGCATAAGTTCCACGGGCCAAAAGGCGTAGGCTGTCTTTATCTGCGGCGGGGAACGCGCTTTCGCCCGCTGCTGCGCGGCGGTCACCAGGAGTACGGTCGGCGAGCCGGGACAGAAAATATCTGCGGAATCGTCGGCATGGGCGCGGCCTGCGAGCTGGCGAATATTCATCTGCCGGGAATGACGCATATCGGCCAATTGCGCAACAGGCTGGAGCATCGCCTGCTGGCCAGCGTGCCGTCGGTCATGGTGATGGGCGGCGGCCAGCCGGCGGTGCCCGGCACGGTGAATCTGGCCTTTGAGTTTATTGAAGGTGAAGCCATTCTGCTGCTGTTAAACCAGGCCGGGATCGCCGCCTCCAGCGGCAGCGCCTGCACCTCAGGCTCGCTGGAACCCTCCCACGTGATGCGGGCGATGAATATCCCCTACACCGCCGCCCACGGCACCATCCGCTTTTCTCTCTCGCGCTACACCCGGGAGAAAGAGATCGATTACGTCGTCGCCACGCTGCCGCCGATTATCGACCGGCTGCGCGCGCTGTCGCCCTACTGGCAGAACGGCAAGCCGCGCCCGGCGGACGCCGTATTCACGCCGGTTTACGGCTAA";

var invFseq = "invF,TCATTTGTCTGCCAATTGAATAATATTTGATAATTTCCGCGGCGAAACGCCGATCAGCTCTTTGATCTCACTAGAAAAATGTGAAGGCGATGAGTAACCATGATTAACGGCTAATTGGGTGATGTTCTCGTGGCCTTCTACACTATTCAGCAGCGATTGCGCCATACGCCAGTTTCGTAATTCACTCTTCGCTTTTCCGCCCAACGCTCTGCTGCACAAACGACGAAAATGGGTATAAGAAACGCCATAGTCTTCTCCCAGCATTCTCATCGTGTTGCCGCTGGTTGACTGAGCGAGTAAATAGCCAACCAACCAGTAACTCTCGCTTTTTCGTAACAGCGCCAGTACCTTATTGAAGGCCGGAGAAGGCGTAATAATTTGCTGCAAAAACCAGTACTCGCAGCGTTTACGATCTTGCCAAATAGCGCGAAACTCAGGACTCAGCAAAACCCATTTATCGGATTCAGCATATGTCGTGTCCACTAATCCTGCGCCATCGATAAATGCCAGTAATTTGCTGAGTACTTCAATTTTTAACGGTCGAAAAACCAGGTCTCCTGATACTGGTGCGACAACGGCCTGCTCGCAAAAAAGCAGCGCGCCTTCCTGAATCAGGCAATTTTCATTGTGTCGGCTTTCAGAAAATGACAT";
</script>


<br>
<a href="#" onclick="loadExample(nitrogenseq);"><img src="img/plus-sign.svg" height="14" width="14"/>Load nifS example</a>. In this example, sequencing errors in a database entry caused point mutations: M110L, E113Q, G124S, and A290R  <a href="http://www.ncbi.nlm.nih.gov/pubmed/22509035">Relevant paper</a> (Supplemental Table 2)<br>
<a href ="#" onclick="loadExample(pCTXvp60);"><img src="img/plus-sign.svg" height="14" width="14"/>Load CTX internal ORF example</a>.  In this example, an unanticipated Leu-rich internal ORF caused plasmid toxicity. <a href="http://www.ncbi.nlm.nih.gov/pubmed/20492662">Relevant paper</a><br>
<a href="#" onclick="loadExample(invFseq);"><img src="img/plus-sign.svg" height="14" width="14"/>Load invF truncated gene example</a>.  In this paper, a misannotation of the start site caused a protein truncation. <a href="http://www.ncbi.nlm.nih.gov/pubmed/23041931">Relevant paper</a><br>

</div>
      <!-- ! end of .container -->
    </div>
    <!-- ! end of #main -->

<footer class='footer'>
<div class='container'>
by Tim Hsiau <!--a href="http://www.linkedin.com/in/timhsiau">Tim Hsiau</a> -->
</div>
</footer>
</body>

<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40377843-1', 'berkeley.edu');
  ga('send', 'pageview');

</script>


</html>
